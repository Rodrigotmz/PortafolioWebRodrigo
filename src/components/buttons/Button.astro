---
interface Props {
  text: string;
  type?: "button" | "submit" | "reset";
  variant?: "primary" | "ghost";
  size?: "sm" | "md" | "lg";
  href?: string; // Si existe, el botón se convierte en un enlace
  onClick?: () => void;
}

const {
  text,
  type = "button",
  variant = "primary",
  size = "md",
  href,
  onClick,
} = Astro.props;

const baseClass = `font-semibold font-text bg-primary-700 text-neutral-100
        rounded text-center inline-block hover:cursor-pointer
        hover:bg-primary-800 transition-transform transform hover:scale-105 duration-200 ease-in-out"`;
const variantClass = {
  primary: "bg-primary-700 text-neutral-100 hover:bg-primary-800",
  ghost: "bg-gray-500 text-white hover:bg-gray-600",
}[variant];

const sizeClass = {
  sm: "py-2 px-4 text-sm",
  md: "py-3 px-5 text-base",
  lg: "py-4 px-6 text-lg",
}[size];
---

<astro-button>
  {
    href ? (
      <a href={href} class={`${baseClass} ${variantClass} ${sizeClass}`}>
        {text}
      </a>
    ) : (
      <button
        type={type}
        class={`${baseClass} ${variantClass} ${sizeClass} bg-primary-700 transition-all`}
        data-click={onClick}
      >
        {text}
      </button>
    )
  }
</astro-button>

<script>
  class AstroButton extends HTMLElement {
    constructor() {
      super();
      // this.addEventListener("click", this.handleClick);

      const onclick = this.dataset.click;
      if (onclick) {
        // transformar onclick en función
        const func = new Function(onclick);

        this.addEventListener("click", () => {
          func();
        });
      }
    }
  }
  customElements.define("astro-button", AstroButton);
</script>
